cmake_minimum_required(VERSION 2.8.8)
project(MeshRender)

set (MeshRender_VERSION_MAJOR 0)
set (MeshRender_VERSION_MINOR 1)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/include")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

if(CMAKE_COMPILER_IS_GNUCXX)
    if (WIN32)
        add_definitions(-DWIN32_LEAN_AND_MEAN)
        add_definitions(-DNOGDI)
    else()
        add_definitions(-fPIC)
    endif()
	add_definitions(-O3)
	add_definitions(-g)
	add_definitions(-std=c++1y)
    add_definitions(-Wall)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-local-typedefs)
    add_definitions(-DUSE_CARTAN)
endif()

find_package(Eigen)
find_package(Boost COMPONENTS date_time iostreams serialization system filesystem regex thread)
find_package(GLEW)
find_package(Graphene)
find_package(OpenMesh)
find_package(OpenGL)
find_package(Cartan)
find_package(Harmont)


file (GLOB_RECURSE obj RELATIVE "${PROJECT_SOURCE_DIR}" "src/*.cpp")
if (EIGEN_FOUND AND Boost_FOUND AND GLEW_FOUND AND GRAPHENE_FOUND AND OPENMESH_FOUND AND OPENGL_FOUND AND CARTAN_FOUND AND HARMONT_FOUND)
	include_directories(${EIGEN_INCLUDE_DIRS})
	include_directories(${Boost_INCLUDE_DIRS})
	include_directories(${GLEW_INCLUDE_DIRS})
	include_directories(${GRAPHENE_INCLUDE_DIRS})
	include_directories(${OPENMESH_INCLUDE_DIRS})
	include_directories(${CARTAN_INCLUDE_DIRS})
	include_directories(${HARMONT_INCLUDE_DIRS})

    add_library(MeshRender SHARED ${obj})
    target_link_libraries(MeshRender ${EIGEN_LIBRARIES} ${Boost_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES} ${GRAPHENE_LIBRARIES} ${OPENMESH_LIBRARIES} ${CARTAN_LIBRARIES} ${HARMONT_LIBRARIES} "dl")

    if (WIN32)
        install (FILES "${PROJECT_BINARY_DIR}/libMeshRender.dll" DESTINATION lib/graphene_modules RENAME "visMeshRender.dll")
    else()
        install (FILES "${PROJECT_BINARY_DIR}/libMeshRender.so" DESTINATION lib/graphene_modules RENAME "visMeshRender.so")
        #install (TARGETS MeshRender DESTINATION lib)
    endif()
    #install (DIRECTORY include/ DESTINATION include/MeshRender)

endif()
