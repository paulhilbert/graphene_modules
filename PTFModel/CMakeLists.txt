cmake_minimum_required(VERSION 2.8.8)
project(PTFModel)

set (PTFModel_VERSION_MAJOR 0)
set (PTFModel_VERSION_MINOR 1)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/include")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

if(CMAKE_COMPILER_IS_GNUCXX)
    if (WIN32)
        #add_definitions(-DWIN32_LEAN_AND_MEAN)
        add_definitions(-DNOGDI)
        add_definitions(-DM_LOG2E=1.44269504088896340736)
        add_definitions(-D__Folder_FWD_DEFINED__)
    else()
        add_definitions(-fPIC)
    endif()
	add_definitions(-O0)
	add_definitions(-g)
	add_definitions(-std=c++17)
    add_definitions(-Wall)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-local-typedefs)
    add_definitions(-Wno-deprecated-declarations)
    add_definitions(-Wno-ignored-attributes)
    add_definitions(-Wno-misleading-indentation)
    add_definitions(-Wno-int-in-bool-context)
    add_definitions(-DUSE_CARTAN)
endif()

find_package(Eigen)
find_package(Boost COMPONENTS date_time iostreams serialization system filesystem regex thread)
find_package(PCL COMPONENTS common io filters)
find_package(GLEW)
find_package(Graphene)
find_package(OpenGL)
find_package(Cartan)
find_package(Harmont)

add_definitions(-DBOOST_COMPUTE_DEBUG_KERNEL_COMPILATION)
find_package(OpenCL)

find_package(VoxelScore)
find_package(TripletMatch)


file (GLOB_RECURSE obj RELATIVE "${PROJECT_SOURCE_DIR}" "src/*.cpp")
if (EIGEN_FOUND AND Boost_FOUND AND GLEW_FOUND AND GRAPHENE_FOUND AND OPENGL_FOUND AND CARTAN_FOUND AND HARMONT_FOUND AND PCL_FOUND AND VOXEL_SCORE_FOUND AND TRIPLET_MATCH_FOUND)
	include_directories(${EIGEN_INCLUDE_DIRS})
	include_directories(${Boost_INCLUDE_DIRS})
	include_directories(${GLEW_INCLUDE_DIRS})
	include_directories(${GRAPHENE_INCLUDE_DIRS})
	include_directories(${CARTAN_INCLUDE_DIRS})
	include_directories(${HARMONT_INCLUDE_DIRS})
	include_directories(${PCL_INCLUDE_DIRS})
	include_directories(${VOXEL_SCORE_INCLUDE_DIRS})
	include_directories(${TRIPLET_MATCH_INCLUDE_DIRS})

    add_library(PTFModel SHARED ${obj})
    set_property(TARGET PTFModel PROPERTY CXX_STANDARD 17)
    target_link_libraries(PTFModel ${EIGEN_LIBRARIES} ${Boost_LIBRARIES} ${OPENGL_LIBRARIES} ${GLEW_LIBRARIES} ${GRAPHENE_LIBRARIES} ${CARTAN_LIBRARIES} ${HARMONT_LIBRARIES} ${PCL_LIBRARIES} ${OpenCL_LIBRARIES} ${VOXEL_SCORE_LIBRARIES} ${TRIPLET_MATCH_LIBRARIES} "")

    if (WIN32)
        install (FILES "${PROJECT_BINARY_DIR}/libPTFModel.dll" DESTINATION lib/graphene_modules RENAME "visPTFModel.dll")
    else()
        install (FILES "${PROJECT_BINARY_DIR}/libPTFModel.so" DESTINATION lib/graphene_modules RENAME "visPTFModel.so")
    endif()

endif()
